void RCAnnotPopWnd::SetRgn(HWND hWnd, RECT& windowRect, bool isRedraw)
{
    CRgnHandle fullRgn;

    //不同的挖角只需要改变以下4个数组就行，数组内的点需要和边框合成一个封闭图形，数组内的点会被留下
    POINT leftTop[] = { { 0, 4 }, { 1, 4 }, { 1, 3 }, { 1, 2 }, { 1, 1 }, { 2, 1 }, { 3, 1 }, { 4, 1 }, { 4, 0 } };
    POINT rightTop[] = { { -4, 0 }, { -4, 1 }, { -3, 1 }, { -2, 1 }, { -1, 1 }, { -1, 2 }, { -1, 3 }, { 0, 3 } };
    POINT rightBottom[] = { { 0, -3 }, { -1, -3 }, {-1, -2}, { -1, -1 }, { -2, -1 }, { -3, -1 }, { -4, -1 }, { -4, 0 } };
    POINT leftBottom[] = { { 4, 0 }, { 4, -1 }, { 3, -1 }, { 2, -1 }, { 1, -1 }, { 1, -2 }, { 1, -3 }, { 1, -4 }, { 0, -4 } };

    int32_t leftTopSize = sizeof(leftTop) / sizeof(POINT);
    int32_t rightTopSize = sizeof(rightTop) / sizeof(POINT);
    int32_t rightBottomSize = sizeof(rightBottom) / sizeof(POINT);
    int32_t leftBottomSize = sizeof(leftBottom) / sizeof(POINT);

    int32_t pointsSize = leftTopSize + rightTopSize + rightBottomSize + leftBottomSize;

    POINT* szPoints = new POINT[pointsSize];

    int32_t pointsIndex = 0;
    for (int32_t i = 0; i < leftTopSize; ++i)
    {
        szPoints[pointsIndex++] = { windowRect.left + leftTop[i].x, windowRect.top + leftTop[i].y };
    }
    for (int32_t i = 0; i < rightTopSize; ++i)
    {
        szPoints[pointsIndex++] = { windowRect.right + rightTop[i].x, windowRect.top + rightTop[i].y };
    }
    for (int32_t i = 0; i < rightBottomSize; ++i)
    {
        szPoints[pointsIndex++] = { windowRect.right + rightBottom[i].x, windowRect.bottom + rightBottom[i].y };
    }
    for (int32_t i = 0; i < leftBottomSize; ++i)
    {
        szPoints[pointsIndex++] = { windowRect.left + leftBottom[i].x, windowRect.bottom + leftBottom[i].y };
    }
    fullRgn.CreatePolygonRgn(szPoints, pointsSize, WINDING);
    delete[] szPoints;
    ::SetWindowRgn(hWnd, fullRgn, isRedraw ? TRUE : FALSE);
    fullRgn.DeleteObject();
}